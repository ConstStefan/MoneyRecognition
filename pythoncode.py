# -*- coding: utf-8 -*-
"""Copy of Copy of proiect care merge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Np6ADSRMjjE9RD_KhSzAmr4MEEiKWig
"""

import os
from warnings import filterwarnings
filterwarnings('ignore')
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout,MaxPool2D,Conv2D,MaxPooling2D,Flatten
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

train=ImageDataGenerator(rescale=1/255,shear_range=0.2,horizontal_flip=True,zoom_range=0.2)
validation=ImageDataGenerator(rescale=1/255)

train_data=train.flow_from_directory('/content/drive/MyDrive/poze/train/',
                                     target_size=(200,200),
                                     batch_size=32,
                                     class_mode='categorical')
validation_data1=train.flow_from_directory('/content/drive/MyDrive/poze/validation/',
                                     target_size=(200,200),
                                     batch_size=8,
                                     class_mode='categorical')

train_data.class_indices

model=tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(200,200,3)),
                                  tf.keras.layers.MaxPool2D(2,2),



                                  #
                                  tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                  tf.keras.layers.MaxPool2D(2,2),




                                  ##
                                  tf.keras.layers.Flatten(),
                                  ##
                                  tf.keras.layers.Dense(512,activation='relu'),



                                  ##
                                  tf.keras.layers.Dense(5,activation='softmax')

                                  ])

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

epochs=17

model_fit=model.fit(train_data,
                    epochs=epochs,
                    validation_data=validation_data1)

train_loss=model.history.history['loss']
train_loss

train_accuracy=model.history.history['accuracy']
train_accuracy

validation_accuracy=model.history.history['val_accuracy']
validation_accuracy

validation_loss=model.history.history['val_loss']
validation_loss

plt.figure(figsize=(16,8))
plt.plot(np.arange(epochs),train_loss,color='g',label='Train_loss')
plt.plot(np.arange(epochs),validation_loss,color='r',label='Validation_loss')
plt.legend()
plt.xlabel('Epochs')
plt.show()

plt.figure(figsize=(16,8))
plt.plot(np.arange(epochs),train_accuracy,color='g',label='Train_accuracy')
plt.plot(np.arange(epochs),validation_accuracy,color='r',label='Validation_accuracy')
plt.legend()
plt.xlabel('Epochs')
plt.show()

def predictie(path):
  img_p=tf.keras.preprocessing.image.load_img(path,target_size=(200,200,3))
  img2=tf.keras.preprocessing.image.img_to_array(img_p)
  img2=np.expand_dims(img2,axis=0)
  img=np.vstack([img2])
  val= np.argmax(model.predict(img2), axis=1)

  if val==0:
    print("Bancnota este de 100 lei")
  elif val==1:
    print("Bancnota este de 10 lei")
  elif val==2:
    print("Bancnota este de 1 leu")
  elif val==3:
    print("Bancnota este de 200 lei")
  elif val==4:
    print("Bancnota este de 5 lei")
  else:
      print("Nu este bancnota!")

#dir_path='/content/drive/MyDrive/poze/test/pozatest.jpeg'
predictie("/content/drive/MyDrive/poze/test/5lei2.jpeg")
img = cv2.imread("/content/drive/MyDrive/poze/test/pozatest.jpeg", cv2.IMREAD_ANYCOLOR)

#image=tf.keras.preprocessing.image.load_img(dir_path,target_size=(200,200))
#plt.imshow(image)

cv2_imshow(img)